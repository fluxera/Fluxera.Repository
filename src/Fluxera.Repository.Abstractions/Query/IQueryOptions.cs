namespace Fluxera.Repository.Query{	using System.Linq;	using JetBrains.Annotations;	/// <summary>	///     Used to define the paging and/or sorting criteria on queries run against a repository.	/// </summary>	/// <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>	[PublicAPI]	public interface IQueryOptions<TAggregateRoot> where TAggregateRoot : class	{		//bool HasPagingOptions { get; }		//bool HasSkipTakeOptions { get; }		//bool HasOrderByOptions { get; }		bool IsEmpty { get; }		//TODO		IQueryable<TAggregateRoot> ApplyTo(IQueryable<TAggregateRoot> queryable);		//IOrderByOptions<TAggregateRoot> Paging(int pageNumber, int pageSize);		//IOrderByOptions<TAggregateRoot> SkipTake(int skipAmount, int takeAmount);		//IOrderByOptions<TAggregateRoot> Skip(int skipAmount);		//IOrderByOptions<TAggregateRoot> Take(int takeAmount);		//IThenByOptions<TAggregateRoot> OrderBy(Expression<Func<TAggregateRoot, object>> sortExpression);		//IThenByOptions<TAggregateRoot> OrderByDescending(Expression<Func<TAggregateRoot, object>> sortExpression);		//bool TryGetPagingOptions(out IPagingOptions<TAggregateRoot>? pagingOptions);		//bool TryGetSkipTakeOptions(out ISkipTakeOptions<TAggregateRoot>? skipTakeOptions);		//bool TryGetOrderByOptions(out IOrderByOptions<TAggregateRoot>? orderByOptions);	}}