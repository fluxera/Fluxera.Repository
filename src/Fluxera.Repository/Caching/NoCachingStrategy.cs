namespace Fluxera.Repository.Caching{	using System;	using System.Collections.Generic;	using System.Linq.Expressions;	using System.Threading.Tasks;	using Fluxera.Entity;	using Fluxera.Repository.Query;	using JetBrains.Annotations;	/// <summary>	///     A caching strategy that does nothing.	/// </summary>	/// <typeparam name="TEntity"></typeparam>	/// <typeparam name="TKey"></typeparam>	[UsedImplicitly]	internal sealed class NoCachingStrategy<TEntity, TKey> : ICachingStrategy<TEntity, TKey>		where TEntity : Entity<TEntity, TKey>		where TKey : IComparable<TKey>, IEquatable<TKey>	{		/// <inheritdoc />		public Task AddAsync(TEntity item)		{			return Task.CompletedTask;		}		/// <inheritdoc />		public Task AddAsync(IEnumerable<TEntity> items)		{			return Task.CompletedTask;		}		public Task UpdateAsync(TEntity item)		{			return Task.CompletedTask;		}		/// <inheritdoc />		public Task UpdateAsync(IEnumerable<TEntity> items)		{			return Task.CompletedTask;		}		/// <inheritdoc />		public async Task<long> CountAsync(Func<Task<long>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<long> CountAsync(			Expression<Func<TEntity, bool>> predicate,			Func<Task<long>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TResult> SumAsync<TResult>(Func<Task<TResult>> setter)			where TResult : notnull, IComparable, IConvertible, IFormattable, IComparable<TResult>, IEquatable<TResult>		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TResult> SumAsync<TResult>(			Expression<Func<TEntity, bool>> predicate,			Func<Task<TResult>> setter)			where TResult : notnull, IComparable, IConvertible, IFormattable, IComparable<TResult>, IEquatable<TResult>		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TResult> AverageAsync<TResult>(Func<Task<TResult>> setter)			where TResult : notnull, IComparable, IConvertible, IFormattable, IComparable<TResult>, IEquatable<TResult>		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TResult> AverageAsync<TResult>(			Expression<Func<TEntity, bool>> predicate,			Func<Task<TResult>> setter)			where TResult : notnull, IComparable, IConvertible, IFormattable, IComparable<TResult>, IEquatable<TResult>		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TEntity> FindOneAsync(			Expression<Func<TEntity, bool>> predicate,			IQueryOptions<TEntity> queryOptions,			Func<Task<TEntity>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TResult> FindOneAsync<TResult>(			Expression<Func<TEntity, bool>> predicate,			Expression<Func<TEntity, TResult>> selector,			IQueryOptions<TEntity> queryOptions,			Func<Task<TResult>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<IReadOnlyCollection<TEntity>> FindManyAsync(			Expression<Func<TEntity, bool>> predicate,			IQueryOptions<TEntity> queryOptions,			Func<Task<IReadOnlyCollection<TEntity>>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<IReadOnlyCollection<TResult>> FindManyAsync<TResult>(			Expression<Func<TEntity, bool>> predicate,			Expression<Func<TEntity, TResult>> selector,			IQueryOptions<TEntity> queryOptions,			Func<Task<IReadOnlyCollection<TResult>>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<bool> ExistsAsync(			Expression<Func<TEntity, bool>> predicate,			Func<Task<bool>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public Task RemoveAsync(TKey id)		{			return Task.CompletedTask;		}		/// <inheritdoc />		public Task RemoveAsync(IEnumerable<TKey> ids)		{			return Task.CompletedTask;		}		/// <inheritdoc />		public async Task<TEntity> GetAsync(			TKey id,			Func<Task<TEntity>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<TResult> GetAsync<TResult>(			TKey id,			Expression<Func<TEntity, TResult>> selector,			Func<Task<TResult>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}		/// <inheritdoc />		public async Task<bool> ExistsAsync(			TKey id,			Func<Task<bool>> setter)		{			return await setter.Invoke().ConfigureAwait(false);		}	}}