//namespace Fluxera.Repository.Interception//{//	using System;//	using System.Collections.Generic;//	using System.Linq.Expressions;//	using System.Threading.Tasks;//	using Fluxera.Entity;//	using Fluxera.Repository.Query;//	using Microsoft.Extensions.Logging;//	internal sealed class DecoratingInterceptor<TAggregateRoot> : IRepositoryInterceptor<TAggregateRoot>//		where TAggregateRoot : AggregateRoot<TAggregateRoot>//	{//		private readonly IReadOnlyCollection<IRepositoryInterceptor<TAggregateRoot>> innerInterceptors;//		private readonly ILogger logger;//		public DecoratingInterceptor(IReadOnlyCollection<IRepositoryInterceptor<TAggregateRoot>> innerInterceptors, ILoggerFactory loggerFactory)//		{//			this.innerInterceptors = innerInterceptors ?? new List<IRepositoryInterceptor<TAggregateRoot>>//			{//				new NoopInterceptor<TAggregateRoot>(),//			};//			this.logger = loggerFactory.CreateLogger(LoggerNames.Interception);//		}//		public async Task BeforeAddAsync(TAggregateRoot item, InterceptionEvent e)//		{//			this.LogTrace($"Intercepting before add: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.BeforeAddAsync(item, e);//			}//		}//		/// <inheritdoc />//		public async Task BeforeAddAsync(IEnumerable<TAggregateRoot> items, InterceptionEvent e)//		{//			throw new NotImplementedException();//		}//		public async Task AfterAddAsync(TAggregateRoot item)//		{//			this.LogTrace($"Intercepting after add: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.AfterAddAsync(item);//			}//		}//		/// <inheritdoc />//		public async Task AfterAddAsync(IEnumerable<TAggregateRoot> items)//		{//			throw new NotImplementedException();//		}//		public async Task BeforeUpdateAsync(TAggregateRoot item, InterceptionEvent e)//		{//			this.LogTrace($"Intercepting before update: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.BeforeUpdateAsync(item, e);//			}//		}//		/// <inheritdoc />//		public async Task BeforeUpdateAsync(IEnumerable<TAggregateRoot> items, InterceptionEvent e)//		{//			throw new NotImplementedException();//		}//		public async Task AfterUpdateAsync(TAggregateRoot item)//		{//			this.LogTrace($"Intercepting after update: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.AfterUpdateAsync(item);//			}//		}//		/// <inheritdoc />//		public async Task AfterUpdateAsync(IEnumerable<TAggregateRoot> items)//		{//			throw new NotImplementedException();//		}//		public async Task BeforeDeleteAsync(TAggregateRoot item, InterceptionEvent e)//		{//			this.LogTrace($"Intercepting before delete: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.BeforeDeleteAsync(item, e);//			}//		}//		/// <inheritdoc />//		public async Task BeforeDeleteAsync(string id, InterceptionEvent e)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task BeforeDeleteAsync(Expression<Func<TAggregateRoot, bool>> predicate, InterceptionEvent e)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task BeforeDeleteAsync(IEnumerable<TAggregateRoot> items, InterceptionEvent e)//		{//			throw new NotImplementedException();//		}//		public async Task AfterDeleteAsync(TAggregateRoot item)//		{//			this.LogTrace($"Intercepting after delete: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.AfterDeleteAsync(item);//			}//		}//		/// <inheritdoc />//		public async Task AfterDeleteAsync(string id)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task AfterDeleteAsync(Expression<Func<TAggregateRoot, bool>> predicate)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task AfterDeleteAsync(IEnumerable<TAggregateRoot> items)//		{//			throw new NotImplementedException();//		}//		public async Task<Expression<Func<TAggregateRoot, bool>>> BeforeCountAsync(//			Expression<Func<TAggregateRoot, bool>> predicate)//		{//			this.LogTrace($"Intercepting before count: Type = {typeof(TAggregateRoot)}");//			Expression<Func<TAggregateRoot, bool>> interceptorPredicate = predicate;//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				interceptorPredicate = await interceptor.BeforeCountAsync(interceptorPredicate);//			}//			return interceptorPredicate;//		}//		public async Task AfterCountAsync(long count)//		{//			this.LogTrace($"Intercepting after count: Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.AfterCountAsync(count);//			}//		}//		public async Task<Expression<Func<TAggregateRoot, bool>>> BeforeFindAsync(//			Expression<Func<TAggregateRoot, bool>> predicate, IQueryOptions<TAggregateRoot> queryOptions)//		{//			this.LogTrace($"Intercepting before find: Type = {typeof(TAggregateRoot)}");//			Expression<Func<TAggregateRoot, bool>> interceptorPredicate = predicate;//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				interceptorPredicate = await interceptor.BeforeFindAsync(interceptorPredicate, queryOptions);//			}//			return interceptorPredicate;//		}//		public async Task AfterFindAsync(IEnumerable<TAggregateRoot> items)//		{//			this.LogTrace($"Intercepting after find (multiple results): Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				// ReSharper disable once PossibleMultipleEnumeration//				await interceptor.AfterFindAsync(items);//			}//		}//		public async Task AfterFindAsync(TAggregateRoot item)//		{//			this.LogTrace($"Intercepting after find (single result): Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.AfterFindAsync(item);//			}//		}//		public async Task AfterFindAsync<TResult>(IEnumerable<TResult> results)//		{//			this.LogTrace($"Intercepting after find (multiple selected results): Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				// ReSharper disable once PossibleMultipleEnumeration//				await interceptor.AfterFindAsync(results);//			}//		}//		public async Task AfterFindAsync<TResult>(TResult result)//		{//			this.LogTrace($"Intercepting after find (single selected result): Type = {typeof(TAggregateRoot)}");//			foreach (IRepositoryInterceptor<TAggregateRoot> interceptor in this.innerInterceptors)//			{//				await interceptor.AfterFindAsync(result);//			}//		}//		/// <inheritdoc />//		public async Task BeforeGetAsync(string id)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task BeforeGetAsync<TResult>(string id, Expression<Func<TAggregateRoot, TResult>> selector)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task AfterGetAsync<TResult>(TResult result)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task AfterGetAsync(TAggregateRoot result)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task BeforeExistsAsync(string id)//		{//			throw new NotImplementedException();//		}//		/// <inheritdoc />//		public async Task AfterExistsAsync(bool exists)//		{//			throw new NotImplementedException();//		}//		private void LogTrace(string message)//		{//			this.logger.LogTrace(message);//		}//	}//}