namespace Fluxera.Repository.Query{	using System;	using System.Collections.Generic;	using System.Linq;	using System.Linq.Expressions;	using Fluxera.Utilities.Extensions;	internal sealed class ThenByOptions<T> : IThenByOptions<T>		where T : class	{		internal IList<OrderByExpression<T>> ThenByExpressions { get; } = new List<OrderByExpression<T>>();		public IThenByOptions<T> ThenBy(Expression<Func<T, object>> sortExpression)		{			this.ThenByExpressions.Add(new OrderByExpression<T>(sortExpression, false));			return this;		}		public IThenByOptions<T> ThenByDescending(Expression<Func<T, object>> sortExpression)		{			this.ThenByExpressions.Add(new OrderByExpression<T>(sortExpression, true));			return this;		}		/// <summary>		///     Used in compiling a unique key for a query.		/// </summary>		/// <returns>Unique key for a query.</returns>		public override string ToString()		{			return this.ThenByExpressions.Any() ? "({1})".FormatInvariantWith(string.Join(",", this.ThenByExpressions)) : "none";		}	}}