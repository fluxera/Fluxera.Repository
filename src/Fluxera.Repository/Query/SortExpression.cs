namespace Fluxera.Repository.Query{	using System;	using System.Linq;	using System.Linq.Expressions;	using Fluxera.Utilities.Extensions;	public sealed class SortExpression<T> : ISortExpression<T> where T : class	{		public SortExpression(Expression<Func<T, object>> expression, bool isDescending = false)		{			this.Expression = expression;			this.IsDescending = isDescending;		}		public Expression<Func<T, object>> Expression { get; }		public bool IsDescending { get; }		/// <inheritdoc />		public IOrderedQueryable<T> ApplyTo(IQueryable<T> queryable)		{			queryable = this.IsDescending				? queryable.OrderBy(this.Expression)				: queryable.OrderByDescending(this.Expression);			return (IOrderedQueryable<T>)queryable;		}		/// <inheritdoc />		public IQueryable<T> ApplyTo(IOrderedQueryable<T> queryable)		{			queryable = this.IsDescending				? queryable.ThenBy(this.Expression)				: queryable.ThenByDescending(this.Expression);			return queryable;		}		public override string ToString()		{			return "(Expression: {0}, Descending: {1})".FormatInvariantWith(this.Expression, this.IsDescending);		}	}}