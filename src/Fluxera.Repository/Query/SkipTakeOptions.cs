namespace Fluxera.Repository.Query{	using Fluxera.Utilities.Extensions;	internal class SkipTakeOptions<T> : ISkipTakeOptions<T>		where T : class	{		public SkipTakeOptions(int? skip = null, int? take = null)		{			this.Skip = skip;			this.Take = take;		}		public int? Skip { get; }		public int? Take { get; }		/// <summary>		///     Used in compiling a unique key for a query.		/// </summary>		/// <returns>Unique key for a query.</returns>		public override string ToString()		{			string skipString = this.Skip.HasValue ? this.Skip.ToString() : "none";			string takeString = this.Take.HasValue ? this.Take.ToString() : "none";			return "(Skip: {0}, Take: {1})".FormatInvariantWith(skipString, takeString);		}	}}