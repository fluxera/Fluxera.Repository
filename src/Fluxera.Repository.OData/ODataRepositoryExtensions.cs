namespace Fluxera.Repository.OData{	using Fluxera.Entity;	using Fluxera.Repository.Query;	using Simple.OData.Client;	internal static class ODataRepositoryExtensions	{		internal static IBoundClient<TAggregateRoot> ApplyOptions<TAggregateRoot, TKey>(			this IBoundClient<TAggregateRoot> client, IQueryOptions<TAggregateRoot>? options)			where TAggregateRoot : AggregateRoot<TAggregateRoot, TKey>		{			if(options is null)			{				return client;			}			//if(options.HasPagingOptions)			//{			//	options.TryGetPagingOptions(out IPagingOptions<TAggregateRoot>? pagingOptions);			//	client = client.Skip(pagingOptions.Skip).Top(pagingOptions.PageSize);			//}			//if(options.HasSkipTakeOptions)			//{			//	options.TryGetSkipTakeOptions(out ISkipTakeOptions<TAggregateRoot>? skipTakeOptions);			//	if(skipTakeOptions.Skip.HasValue)			//	{			//		client = client.Skip(skipTakeOptions.Skip.Value);			//	}			//	if(skipTakeOptions.Take.HasValue)			//	{			//		client = client.Top(skipTakeOptions.Take.Value);			//	}			//}			//if(options.HasOrderByOptions)			//{			//	options.TryGetOrderByOptions(out IOrderByOptions<TAggregateRoot>? orderByOptions);			//	IOrderByExpression<TAggregateRoot> orderBy = orderByOptions?.OrderByExpression;			//	if(orderBy != null)			//	{			//		IBoundClient<TAggregateRoot> orderedClient = orderBy.IsDescending			//			? client.OrderByDescending(orderBy.SortExpression)			//			: client.OrderBy(orderBy.SortExpression);			//		if(orderByOptions.ThenByExpressions != null)			//		{			//			foreach(IOrderByExpression<TAggregateRoot> thenBy in orderByOptions.ThenByExpressions)			//			{			//				orderedClient = thenBy.IsDescending			//					? orderedClient.ThenBy(thenBy.SortExpression)			//					: orderedClient.ThenByDescending(thenBy.SortExpression);			//			}			//		}			//		client = orderedClient;			//	}			//}			return client;		}	}}