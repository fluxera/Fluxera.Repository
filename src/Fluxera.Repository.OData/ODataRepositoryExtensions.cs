namespace Fluxera.Repository.OData{	using Fluxera.Repository.Query;	using Simple.OData.Client;	internal static class ODataRepositoryExtensions	{		internal static IBoundClient<T> Apply<T>(this IBoundClient<T> client, IQueryOptions<T>? options) where T : class		{			if(options is null)			{				return client;			}			if(options.TryGetPagingOptions(out IPagingOptions<T>? pagingOptions))			{				client = client					.Skip(pagingOptions!.Skip)					.Top(pagingOptions.PageSize);			}			if(options.TryGetSkipTakeOptions(out ISkipTakeOptions<T>? skipTakeOptions))			{				if(skipTakeOptions!.SkipAmount.HasValue)				{					client = client.Skip(skipTakeOptions.SkipAmount.Value);				}				if(skipTakeOptions.TakeAmount.HasValue)				{					client = client.Top(skipTakeOptions.TakeAmount.Value);				}			}			if(options.TryGetSortingOptions(out ISortingOptions<T>? orderByOptions))			{				ISortExpression<T> primaryExpression = orderByOptions!.PrimaryExpression;				IBoundClient<T> orderedClient = primaryExpression.IsDescending					? client.OrderByDescending(primaryExpression.Expression)					: client.OrderBy(primaryExpression.Expression);				foreach(ISortExpression<T> expression in orderByOptions.SecondaryExpressions)				{					orderedClient = expression.IsDescending						? orderedClient.ThenBy(expression.Expression)						: orderedClient.ThenByDescending(expression.Expression);				}				client = orderedClient;			}			return client;		}	}}