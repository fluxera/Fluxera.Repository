# CI pipeline for a NuGet package solution.

trigger:
  branches:
    include: [ '*' ]
    exclude: [ 'refs/tags/*' ]

variables:
  BuildConfiguration: Release
  DotNetCoreVersion: 6.0.100

stages:
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      persistCredentials: 'true'
      clean: true
    # Run GitVersion to acquire the current build version.
    - task: GitVersion@5
      displayName: 'Acquire and Apply Version'
      inputs:
        updateAssemblyInfo: true
        updateAssemblyInfoFilename: 'src/SolutionInfo.cs'
        additionalArguments: '/ensureassemblyinfo'
        configFilePath: 'GitVersion.yml'
    # Install the desired .NET SDK.   
    - task: UseDotNet@2
      displayName: 'Acquire .NET SDK'
      inputs:
        packageType: 'sdk'
        version: $(DotNetCoreVersion)
        includePreviewVersions: true   
    # Build all projects.
    - task: DotNetCoreCLI@2
      displayName: 'Build Projects'
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
        nugetConfigPath: NuGet.config  
    # Run all available tests.
    - task: DotNetCoreCLI@2
      displayName: 'Execute Tests'
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
        nobuild: true
    # Set the version to a environment variable. This will be used in the NuGet pack task.
    - script: echo %Action%%SemVerEnv%
      displayName: 'Set Package Version Variable'
      env:
        Action: '##vso[task.setvariable variable=NuGetPackageVersion]'
        SemVerEnv: $(GitVersion.SemVer)
    # Create the NuGet packages.
    - task: DotNetCoreCLI@2
      displayName: 'NuGet Pack Packages'
      inputs:
        command: 'pack'
        packagesToPack: 'src/**/*.csproj'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'NuGetPackageVersion'
        verbosityPack: Minimal
        includesymbols: false
    # Copy created NuGet packages to the builds artifacts directory.
    - task: PublishBuildArtifacts@1
      displayName: 'NuGet Publish Package Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
#- stage: DeployPackages
#  dependsOn: BuildAndTest
#  # Only publish packages for main, develop (alpha) and release (beta) branches.
#  condition: and(succeeded('BuildAndTest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
#  jobs:
#  - job: DeployPackages
#    pool:
#      vmImage: 'windows-latest'
#    steps:
#    - checkout: self
#      persistCredentials: 'true'
#      clean: true
#    # Run GitVersion to acquire the current build version.
#    - task: GitVersion@5
#      displayName: 'Acquire and Apply Version'
#      inputs:
#        updateAssemblyInfo: false
#        configFilePath: 'GitVersion.yml'
#    # Download the created packages.
#    - task: DownloadBuildArtifacts@0
#      inputs:
#        buildType: 'current'
#        downloadType: 'single'
#        artifactName: 'drop'
#        downloadPath: '$(System.ArtifactsDirectory)'
#    # Publish the NuGet packages to the package feed.
#    # https://www.programmingwithwolfgang.com/azure-devops-publish-nuget/
#    - task: DotNetCoreCLI@2
#      condition: not(contains(variables['Build.BuildNumber'], '-ci'))
#      displayName: 'NuGet Push Packages'
#      inputs:
#        command: custom
#        custom: nuget
#        arguments: >
#          push $(System.ArtifactsDirectory)/**/*.nupkg
#          -s https://api.nuget.org/v3/index.json
#          -k $(NuGetApiKey)
#        #command: 'push'
#        #packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg'
#        #nuGetFeedType: 'external'
#        #publishFeedCredentials: 'Foundation'
#        #verbosityRestore: Normal
#        #includesymbols: false