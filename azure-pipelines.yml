trigger:
  branches:
    include: [ '*' ]
    exclude: [ 'refs/tags/*' ]

variables:
  BuildConfiguration: Release
  DotNetCoreVersion: 7.0.x

parameters:
- name: publishPackages
  displayName: "Publish NuGet packages"
  type: boolean
  default: false

stages:
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    pool:
      name: Default
    steps:
    - checkout: self
      fetchDepth: 0
      persistCredentials: 'true'
      clean: true
    # Install the desired .NET SDK.   
    #- task: UseDotNet@2
    #  displayName: 'Acquire .NET SDK'
    #  inputs:
    #    packageType: 'sdk'
    #    version: $(DotNetCoreVersion)
    #    includePreviewVersions: false   
    # Build all projects.
    - task: DotNetCoreCLI@2
      displayName: 'Build Projects'
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    # Run all available tests.
    - task: DotNetCoreCLI@2
      displayName: 'Execute Tests'
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
        nobuild: true
    # Create the NuGet packages.
    - task: DotNetCoreCLI@2
      displayName: 'Pack Packages'
      inputs:
        command: 'pack'
        packagesToPack: 'src/**/*.csproj'
        nobuild: true
        verbosityPack: Minimal
        includesymbols: false
    # Copy created NuGet packages to the builds artifacts directory.
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Package Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packages'
        publishLocation: 'Container'

- stage: PublishPackages
  dependsOn: BuildAndTest
  # Only publish packages for main branch.
  condition: and(succeeded('BuildAndTest'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(${{ parameters.publishPackages }}, true))
  jobs:
  - job: PublishPackages
    pool:
      name: Default
    steps:
    # Download the created packages.
    - task: DownloadBuildArtifacts@0
      displayName: 'Download NuGet Packges'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'packages'
        downloadPath: '$(System.ArtifactsDirectory)'
    # Publish the NuGet packages to the package feed.
    - task: DotNetCoreCLI@2
      displayName: Push Nuget Package
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(System.ArtifactsDirectory)/**/*.nupkg
          -s https://api.nuget.org/v3/index.json
          -k $(NuGetApiKey)
